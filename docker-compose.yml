version: "2.1"

services:
  # Serviço de Banco de Dados
  database:
    container_name: gcomunit_db
    image: postgres
    environment:
      - POSTGRES_USERNAME=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DATABASE=${DB_DATABASE}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      # - ./postgres_data:/postgres/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 10s
      retries: 5

  # Serviço da API
  server:
    container_name: gcomunity_api
    # restart: always
    environment: 
      WAIT_HOST: database:5432
    build:
      context: ./
      dockerfile: ./dockerfiles/server.dockerfile
    env_file:
      - ./server/.env
    ports:
      - ${SERVER_PORT}:3333
    volumes:
      - ./server/.env:/server/.env
      - ./server:/server
    networks:
      - backend
      - frontend
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
        test: "echo 'Service Ready Up'"
        interval: 10s
        timeout: 10s
        retries: 3
    command: sh -c "adonis migration:run --seed && adonis serve --dev"

  # Serviço do Website
  web:
    tty: true
    # restart: always
    command: [ "npm", "start"]
    # environment: 
    #   WAIT_HOST: server:3333
    build:
      context: ./
      dockerfile: ./dockerfiles/web.dockerfile
    ports:
      - "${WEB_PORT}:3000"
    volumes:
      - ./web:/web
    # depends_on:
    #   server:
    #     condition: service_healthy
    networks:
      - frontend

networks:
  backend:
    driver: bridge
  frontend:
    driver: bridge
volumes:
  postgres_data:
